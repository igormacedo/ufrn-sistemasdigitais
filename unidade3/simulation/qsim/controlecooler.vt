// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/17/2017 17:55:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    5to3bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 5to3bits_vlg_sample_tst(
	TimeIsLessThan30000,
	TimeIsLessThan60000,
	TimeIsLessThan90000,
	TimeIsLessThan120000,
	TimeIsLessThan180000,
	sampler_tx
);
input  TimeIsLessThan30000;
input  TimeIsLessThan60000;
input  TimeIsLessThan90000;
input  TimeIsLessThan120000;
input  TimeIsLessThan180000;
output sampler_tx;

reg sample;
time current_time;
always @(TimeIsLessThan30000 or TimeIsLessThan60000 or TimeIsLessThan90000 or TimeIsLessThan120000 or TimeIsLessThan180000)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 5to3bits_vlg_check_tst (
	OUT_b0,
	OUT_b1,
	OUT_b2,
	sampler_rx
);
input  OUT_b0;
input  OUT_b1;
input  OUT_b2;
input sampler_rx;

reg  OUT_b0_expected;
reg  OUT_b1_expected;
reg  OUT_b2_expected;

reg  OUT_b0_prev;
reg  OUT_b1_prev;
reg  OUT_b2_prev;

reg  OUT_b0_expected_prev;
reg  OUT_b1_expected_prev;
reg  OUT_b2_expected_prev;

reg  last_OUT_b0_exp;
reg  last_OUT_b1_exp;
reg  last_OUT_b2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT_b0_prev = OUT_b0;
	OUT_b1_prev = OUT_b1;
	OUT_b2_prev = OUT_b2;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_b0_expected_prev = OUT_b0_expected;
	OUT_b1_expected_prev = OUT_b1_expected;
	OUT_b2_expected_prev = OUT_b2_expected;
end



// expected OUT_b0
initial
begin
	OUT_b0_expected = 1'bX;
end 

// expected OUT_b1
initial
begin
	OUT_b1_expected = 1'bX;
end 

// expected OUT_b2
initial
begin
	OUT_b2_expected = 1'bX;
end 
// generate trigger
always @(OUT_b0_expected or OUT_b0 or OUT_b1_expected or OUT_b1 or OUT_b2_expected or OUT_b2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT_b0 = %b | expected OUT_b1 = %b | expected OUT_b2 = %b | ",OUT_b0_expected_prev,OUT_b1_expected_prev,OUT_b2_expected_prev);
	$display("| real OUT_b0 = %b | real OUT_b1 = %b | real OUT_b2 = %b | ",OUT_b0_prev,OUT_b1_prev,OUT_b2_prev);
`endif
	if (
		( OUT_b0_expected_prev !== 1'bx ) && ( OUT_b0_prev !== OUT_b0_expected_prev )
		&& ((OUT_b0_expected_prev !== last_OUT_b0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_b0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_b0_expected_prev);
		$display ("     Real value = %b", OUT_b0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_b0_exp = OUT_b0_expected_prev;
	end
	if (
		( OUT_b1_expected_prev !== 1'bx ) && ( OUT_b1_prev !== OUT_b1_expected_prev )
		&& ((OUT_b1_expected_prev !== last_OUT_b1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_b1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_b1_expected_prev);
		$display ("     Real value = %b", OUT_b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_b1_exp = OUT_b1_expected_prev;
	end
	if (
		( OUT_b2_expected_prev !== 1'bx ) && ( OUT_b2_prev !== OUT_b2_expected_prev )
		&& ((OUT_b2_expected_prev !== last_OUT_b2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_b2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_b2_expected_prev);
		$display ("     Real value = %b", OUT_b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_b2_exp = OUT_b2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module 5to3bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg TimeIsLessThan30000;
reg TimeIsLessThan60000;
reg TimeIsLessThan90000;
reg TimeIsLessThan120000;
reg TimeIsLessThan180000;
// wires                                               
wire OUT_b0;
wire OUT_b1;
wire OUT_b2;

wire sampler;                             

// assign statements (if any)                          
5to3bits i1 (
// port map - connection between master ports and signals/registers   
	.OUT_b0(OUT_b0),
	.OUT_b1(OUT_b1),
	.OUT_b2(OUT_b2),
	.TimeIsLessThan30000(TimeIsLessThan30000),
	.TimeIsLessThan60000(TimeIsLessThan60000),
	.TimeIsLessThan90000(TimeIsLessThan90000),
	.TimeIsLessThan120000(TimeIsLessThan120000),
	.TimeIsLessThan180000(TimeIsLessThan180000)
);

// TimeIsLessThan30000
always
begin
	TimeIsLessThan30000 = 1'b0;
	TimeIsLessThan30000 = #500000 1'b1;
	#500000;
end 

// TimeIsLessThan60000
always
begin
	TimeIsLessThan60000 = 1'b0;
	TimeIsLessThan60000 = #1000000 1'b1;
	#1000000;
end 

// TimeIsLessThan90000
always
begin
	TimeIsLessThan90000 = 1'b0;
	TimeIsLessThan90000 = #2000000 1'b1;
	#2000000;
end 

// TimeIsLessThan120000
initial
begin
	repeat(12)
	begin
		TimeIsLessThan120000 = 1'b0;
		TimeIsLessThan120000 = #4000000 1'b1;
		# 4000000;
	end
	TimeIsLessThan120000 = 1'b0;
end 

// TimeIsLessThan180000
initial
begin
	repeat(6)
	begin
		TimeIsLessThan180000 = 1'b0;
		TimeIsLessThan180000 = #8000000 1'b1;
		# 8000000;
	end
	TimeIsLessThan180000 = 1'b0;
end 

5to3bits_vlg_sample_tst tb_sample (
	.TimeIsLessThan30000(TimeIsLessThan30000),
	.TimeIsLessThan60000(TimeIsLessThan60000),
	.TimeIsLessThan90000(TimeIsLessThan90000),
	.TimeIsLessThan120000(TimeIsLessThan120000),
	.TimeIsLessThan180000(TimeIsLessThan180000),
	.sampler_tx(sampler)
);

5to3bits_vlg_check_tst tb_out(
	.OUT_b0(OUT_b0),
	.OUT_b1(OUT_b1),
	.OUT_b2(OUT_b2),
	.sampler_rx(sampler)
);
endmodule

